<div class="WMBSC loading">
    <div class="WMBSC-content" @ref="WMBSCReference">@BlazorSlickCarouselContent</div>
    @if (BlazorSlickCarouselLoading == null)
    {
        <div class="WMBSC-loading">Loading...</div>
    }
    else
    {
        <div class="WMBSC-loading">@BlazorSlickCarouselLoading</div>
    }
</div>

@using Microsoft.JSInterop

@code {
    [Parameter]
    public RenderFragment BlazorSlickCarouselContent { get; set; }

    [Parameter]
    public RenderFragment BlazorSlickCarouselLoading { get; set; }

    [Parameter]
    public bool addJquery { get; set; }

    [Parameter]
    public WMBSCConfigurations Configurations { get; set; }

    [Parameter]
    public string ProjectName { get; set; }

    [Parameter]
    public string CallbackAfterChange { get; set;}

    [Parameter]
    public string CallbackBeforeChange { get; set;}

    [Parameter]
    public string CallbackBreakpoint { get; set;}

    [Parameter]
    public string CallbackDestroy { get; set;}

    [Parameter]
    public string CallbackEdge { get; set;}

    [Parameter]
    public string CallbackInit { get; set;}

    [Parameter]
    public string CallbackReInit { get; set;}

    [Parameter]
    public string CallbackSetPosition { get; set;}

    [Parameter]
    public string CallbackSwipe { get; set;}

    [Parameter]
    public string CallbackLazyLoaded { get; set;}

    [Parameter]
    public string CallbackLazyLoadError { get; set;}

    [Inject]
    protected IJSRuntime jsRuntime { get; set; }

    [Inject]
    protected IWMBSC TheWMBSC { get; set; }

    public Dictionary<string, string> ConfigCallbacks;

    ElementReference WMBSCReference;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ConfigCallbacks = new Dictionary<string, string>();
                ConfigCallbacks["projectName"] = ProjectName;
                ConfigCallbacks["callbackAfterChange"] = CallbackAfterChange;
                ConfigCallbacks["callbackBeforeChange"] = CallbackBeforeChange;
                ConfigCallbacks["callbackBreakpoint"] = CallbackBreakpoint;
                ConfigCallbacks["callbackDestroy"] = CallbackDestroy;
                ConfigCallbacks["callbackEdge"] = CallbackEdge;
                ConfigCallbacks["callbackInit"] = CallbackInit;
                ConfigCallbacks["callbackReInit"] = CallbackReInit;
                ConfigCallbacks["callbackSetPosition"] = CallbackSetPosition;
                ConfigCallbacks["callbackSwipe"] = CallbackSwipe;
                ConfigCallbacks["callbackLazyLoaded"] = CallbackLazyLoaded;
                ConfigCallbacks["callbackLazyLoadError"] = CallbackLazyLoadError;
            await TheWMBSC.Init(WMBSCReference, Configurations, ConfigCallbacks);
        }
    }

    public async Task<int> CurrentSlide()
        {
        return await TheWMBSC.SlickCurrentSlide();
    }

    public async Task GoTo(int slideNumber)
    {
        await TheWMBSC.SlickGoTo(slideNumber);
    }

    public async Task Next()
    {
        await TheWMBSC.SlickNext();
    }

    public async Task Prev()
    {
        await TheWMBSC.SlickPrev();
    }

    public async Task Add(ElementReference newItem)
    {
        await TheWMBSC.SlickAdd(newItem);
    }

    public async Task Add(string newItem)
    {
        await TheWMBSC.SlickAdd(newItem);
    }

    public async Task Remove(int slideNumber, bool removeBefore)
    {
        await TheWMBSC.SlickRemove(slideNumber, removeBefore);
    }

    public async Task Destroy()
    {
        await TheWMBSC.SlickDestroy();  
    }

    public async Task Constroy(WMBSCConfigurations configurations, Dictionary<string, string> configCallbacks)
    {
        await TheWMBSC.SlickConstroy(configurations);  
    }
    
}