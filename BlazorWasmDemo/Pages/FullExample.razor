@page "/full-example"

<div>

    <h1>Blazor Slick Carousel Demo</h1>
    <h2>Full implementation demo.</h2>
    <p>Check the browser dev tools to see the logs printed.</p>
    
    <br><hr><br>

    <BlazorSlickCarousel 
        @ref="theCarousel"
        Id="my-carousel"
        CustomClass="my-custom-class"
        ContainerCustomClass="my-custom-class-to-container"
        Configurations="configurations" 
        ProjectName="BlazorWasmDemo"
        CallbackAfterChange="MyAfterChange"
        CallbackBeforeChange="MyBeforeChange"
        CallbackBreakpoint="MyBreakpoint"
        CallbackDestroy="MyDestroy"
        CallbackEdge="MyEdge"
        CallbackInit="MyInit"
        CallbackReInit="MyReInit"
        CallbackSetPosition="MySetPosition"
        CallbackSwipe="MySwipe"
        CallbackLazyLoaded="MyLazyLoaded"
        CallbackLazyLoadError="MyLazyLoadError">

        <BlazorSlickCarouselContent>
            <div>
                <img data-lazy="https://loremflickr.com/400/400?random=7" alt="">
            </div>
            <div>
                <img data-lazy="https://loremflickr.com/400/400?random=8" alt="">
            </div>
            <div>
                <img data-lazy="https://loremflickr.com/400/400?random=9" alt="">
            </div>
            <div>
                <img data-lazy="https://loremflickr.com/400/400?random=10" alt="">
            </div>
            <div>
                <img data-lazy="https://loremflickr.com/400/400?random=11" alt="">
            </div>
            <div>
                <img data-lazy="https://loremflickr.com/400/400?random=12" alt="">
            </div>
        </BlazorSlickCarouselContent>

    </BlazorSlickCarousel>
    
    <br><hr><br>

    <div>
        <button class="btn btn-primary btn-sm" @onclick="@(e => ShowCurrentSlideIndex())">Log the Current Slide</button>
        <button class="btn btn-primary btn-sm" @onclick="@(e => GoTo(2))">Go To 3</button>
        <button class="btn btn-primary btn-sm" @onclick="@(e => Next())">Next Slide</button>
        <button class="btn btn-primary btn-sm" @onclick="@(e => Prev())">Prev Slide</button>
        <button class="btn btn-primary btn-sm" @onclick="@(e => Add())">Add New Item</button>
        <button class="btn btn-primary btn-sm" @onclick="@(e => Remove(1, false))">Remove</button>
        <button class="btn btn-primary btn-sm" @onclick="@(e => Destroy())">Destroy</button>
        <button class="btn btn-primary btn-sm" @onclick="@(e => Constroy())">Constroy</button>
    </div>

    <br><br><br>

</div>

@code {
    public BlazorSlickCarousel theCarousel;
    public WMBSCInitialSettings configurations;

    protected override void OnInitialized()
    {
        /************************************************************
         *
         *  CONFIGURATIONS
         *
         ************************************************************/
        WMBSCSettings breakpoint400Settings = new WMBSCSettings {
            slidesToShow = 1,
            arrows = true
        };
        WMBSCResponsiveSettings responsive = new WMBSCResponsiveSettings {
            breakpoint = 400,
            settings = breakpoint400Settings
        };

        List<WMBSCResponsiveSettings> responsiveSettingsList = new List<WMBSCResponsiveSettings>();
        responsiveSettingsList.Add(responsive);

        configurations = new WMBSCInitialSettings {
            arrows = true,
            dots = true,
            slidesToShow = 2,
            slidesToScroll = 1,
            infinite = false,
            responsive = responsiveSettingsList
        };
    }

    /************************************************************
     *
     *  CALLBACKS
     *
     ************************************************************/

    [JSInvokable]
    public static void MyAfterChange(int currentSlide)
    {
        System.Console.WriteLine("MyAfterChange");
    }

    [JSInvokable]
    public static void MyBeforeChange(int currentSlide, int nextSlide)
    {
        System.Console.WriteLine("MyBeforeChange");
    }

    [JSInvokable]
    public static void MyBreakpoint(object breakpoint)
    {
        System.Console.WriteLine("MyBreakpoint");
    }

    [JSInvokable]
    public static void MyDestroy()
    {
        System.Console.WriteLine("MyDestroy");
    }

    [JSInvokable]
    public static void MyEdge()
    {
        System.Console.WriteLine("MyEdge");
    }

    [JSInvokable]
    public static void MyInit()
    {
        System.Console.WriteLine("MyInit");
    }

    [JSInvokable]
    public static void MyReInit()
    {
        System.Console.WriteLine("MyReInit");
    }

    [JSInvokable]
    public static void MySetPosition()
    {
        System.Console.WriteLine("MySetPosition");
    }

    [JSInvokable]
    public static void MySwipe()
    {
        System.Console.WriteLine("MySwipe");
    }

    [JSInvokable]
    public static void MyLazyLoaded(string imageSource)
    {
        System.Console.WriteLine("MyLazyLoaded");
    }

    [JSInvokable]
    public static void MyLazyLoadError(string imageSource)
    {
        System.Console.WriteLine("MyLazyLoadError");
    }


    /************************************************************
     *
     *  METHODS
     *
     ************************************************************/

    public async void ShowCurrentSlideIndex()
    {
        int currentSlide = await theCarousel.CurrentSlide();
        System.Console.WriteLine(currentSlide);
    }

    public async void GoTo(int slideNumber) 
    {
        await theCarousel.GoTo(slideNumber);
    }

    public async void Next() 
    {
        await theCarousel.Next();
    }

    public async void Prev() 
    {
        await theCarousel.Prev();
    }

    public async void Add() 
    {
        await theCarousel.Add("<div><img src='https://loremflickr.com/400/400?random=13' /></div>");
    }

    public async void Remove(int slideNumber, bool removeBefore)
    {
        await theCarousel.Remove(slideNumber, removeBefore);
    }

    public async void Destroy()
    {
        await theCarousel.Destroy();
    }

    public async void Constroy()
    {
        await theCarousel.Constroy(theCarousel.Configurations, theCarousel.ConfigCallbacks);
    }
}