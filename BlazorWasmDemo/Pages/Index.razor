@page "/"

<h1>Hello, world!</h1>

Welcome to your new app.

<BlazorSlickCarousel 
    @ref="theCarousel"
    Configurations="configurations" 
    ProjectName="BlazorWasmDemo"
    CallbackAfterChange="MyAfterChange"
    CallbackBeforeChange="MyBeforeChange"
    CallbackBreakpoint="MyBreakpoint"
    CallbackDestroy="MyDestroy"
    CallbackEdge="MyEdge"
    CallbackInit="MyInit"
    CallbackReInit="MyReInit"
    CallbackSetPosition="MySetPosition"
    CallbackSwipe="MySwipe"
    CallbackLazyLoaded="MyLazyLoaded"
    CallbackLazyLoadError="MyLazyLoadError">
    <BlazorSlickCarouselContent>
        <div>
            <img data-lazy="https://loremflickr.com/540/240?random=1" alt="">
        </div>
        <div>
            <img data-lazy="https://loremflickr.com/540/240?random=2" alt="">
        </div>
        <div>
            <img data-lazy="https://loremflickr.com/540/240?random=3" alt="">
        </div>
        <div>
            <img data-lazy="https://loremflickr.com/540/240?random=4" alt="">
        </div>
        <div>
            <img data-lazy="https://loremflickr.com/540/240?random=5" alt="">
        </div>
        <div>
            <img data-lazy="https://loremflickr.com/540/240?random=6" alt="">
        </div>
    </BlazorSlickCarouselContent>
</BlazorSlickCarousel>

<div>
    <button @onclick="@(e => ShowCurrentSlideIndex())">Log the Current Slide</button>
    <button @onclick="@(e => GoTo(2))">Go To 3</button>
    <button @onclick="@(e => Next())">Next Slide</button>
    <button @onclick="@(e => Prev())">Prev Slide</button>
    <button @onclick="@(e => Add())">Add New Item</button>
    <button @onclick="@(e => Remove(1, false))">Remove</button>
    <button @onclick="@(e => Destroy())">Destroy</button>
    <button @onclick="@(e => Constroy())">Constroy</button>
</div>

<SurveyPrompt Title="How is Blazor working for you?" />

@code {
    public BlazorSlickCarousel theCarousel;
    public WMBSCConfigurations configurations;
    public WMBSCResponsive responsive;
    public WMBSCOptions options;
    public List<WMBSCResponsive> responsiveList;

    protected override void OnInitialized()
    {
        options = new WMBSCOptions {
            slidesToShow = 1,
            arrows = true
        };
        responsive = new WMBSCResponsive {
            breakpoint = 400,
            settings = options
        };
        responsiveList = new List<WMBSCResponsive>();
        responsiveList.Add(responsive);
        configurations = new WMBSCConfigurations {
            arrows = true,
            dots = true,
            slidesToShow = 2,
            slidesToScroll = 1,
            infinite = false,
            responsive = responsiveList
        };
    }

    [JSInvokable]
    public static void MyAfterChange(int currentSlide)
    {
        System.Console.WriteLine("MyAfterChange");
    }

    [JSInvokable]
    public static void MyBeforeChange(int currentSlide, int nextSlide)
    {
        System.Console.WriteLine("MyBeforeChange");
    }

    [JSInvokable]
    public static void MyBreakpoint(object breakpoint)
    {
        System.Console.WriteLine("MyBreakpoint");
    }

    [JSInvokable]
    public static void MyDestroy()
    {
        System.Console.WriteLine("MyDestroy");
    }

    [JSInvokable]
    public static void MyEdge()
    {
        System.Console.WriteLine("MyEdge");
    }

    [JSInvokable]
    public static void MyInit()
    {
        System.Console.WriteLine("MyInit");
    }

    [JSInvokable]
    public static void MyReInit()
    {
        System.Console.WriteLine("MyReInit");
    }

    [JSInvokable]
    public static void MySetPosition()
    {
        System.Console.WriteLine("MySetPosition");
    }

    [JSInvokable]
    public static void MySwipe()
    {
        System.Console.WriteLine("MySwipe");
    }

    [JSInvokable]
    public static void MyLazyLoaded(string imageSource)
    {
        System.Console.WriteLine("MyLazyLoaded");
    }

    [JSInvokable]
    public static void MyLazyLoadError(string imageSource)
    {
        System.Console.WriteLine("MyLazyLoadError");
    }

    public async void ShowCurrentSlideIndex()
    {
        int currentSlide = await theCarousel.CurrentSlide();
        System.Console.WriteLine(currentSlide);
    }

    public async void GoTo(int slideNumber) 
    {
        await theCarousel.GoTo(slideNumber);
    }

    public async void Next() 
    {
        await theCarousel.Next();
    }

    public async void Prev() 
    {
        await theCarousel.Prev();
    }

    public async void Add() 
    {
        await theCarousel.Add("<img src='https://loremflickr.com/540/240?random=7' />");
    }

    public async void Remove(int slideNumber, bool removeBefore)
    {
        await theCarousel.Remove(slideNumber, removeBefore);
    }

    public async void Destroy()
    {
        await theCarousel.Destroy();
    }

    public async void Constroy()
    {
        await theCarousel.Constroy(theCarousel.Configurations, theCarousel.ConfigCallbacks);
    }
}